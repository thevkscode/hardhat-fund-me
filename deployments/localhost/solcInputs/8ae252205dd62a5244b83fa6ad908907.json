{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "//SPDX-License-Identifier:MIT\n//1.pragma\npragma solidity ^0.8.7;\n//2.imports\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n// 3. Interfaces, Libraries, Contracts\nerror FundMe__NotOwner();\n\n//the below syntex helps in creating documentation of contract,\n//we can use the same to describe the functions of contract\n/** @title A contract for crowd funding\n * @author Vivek Singh\n * @notice This is to demo a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n    //type declarations\n    using PriceConverter for uint256;\n\n    //static variables\n    uint256 public constant MINIMUM_USD = 50 * 1 ** 18; //constant<=efficient way to save the gas\n    address private immutable i_owner; //immutable<=efficient way to save the gas\n    address[] private s_funders;\n    mapping(address => uint256) public s_addressToAmountFunded;\n    AggregatorV3Interface private s_priceFeed;\n\n    //events\n\n    //modifier\n    modifier onlyOwner() {\n        // require(msg.sender==i_owner,\"You Are Not the Owner\");\n        //alternative and efficient way to save gas\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _; //this means execution of other lines in the funcion where this modifier is declared\n    }\n\n    // Functions Order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n    //same as other language constructor\n    constructor(address priceFeed) {\n        i_owner = msg.sender; //msg.sender<=global function which returns the address of sender who is doing transaction\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n    }\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    function fund()\n        public\n        payable\n    //<=payable is used to do transactions in ether\n    {\n        //want to be able to set a minimum fund amount in USD\n        //1.How do we send ETH to this contract?\n        //required is used to set the minimum ether needed for transaction\n        //msg.value tells that how much ether is requested to send my user\n        require(\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        ); //etherium is sent in wei 1e18 wei==1 eth and mssg is generated when less than the checked eth is tried to send(reverting)\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] += msg.value;\n        //what is revrting\n        //undo any action before,and send the remaining gas back\n    }\n\n    function withdraw() public onlyOwner {\n        //resetting the funders amount to 0\n        for (\n            uint256 fundersIndex = 0;\n            fundersIndex < s_funders.length;\n            fundersIndex++\n        ) {\n            address funder = s_funders[fundersIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        //reset the funders\n        s_funders = new address[](0);\n        /*\n        3 ways to send the money\n        1.transfer\n        2.send\n        3.call\n        */\n        //transfer:-this throws the error if not executed successfully and automatically revert back the transaction,which can be used in try catch block\n        // payable(msg.sender).transfer(address(this).balance);\n\n        //send:-if not successfully executed ,this returns a boolean value which can be used to revert the transaction\n        // bool sendSuccess=payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess,\"Transaction failed\");\n\n        //call:-this return 2  values ,one is boolean value which tells if the transaction is successfull or not,another is byte data which is returned along with transaction\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\n            \"\"\n        );\n        require(success);\n        //modifier:-modifier are used to execute something in the starting or ending of multiple functions\n    }\n\n    // google evm-opcodes:gas used for every events\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        //mappings can't be in memory\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    /*\n     * @notice Gets the amount that an address has funded\n     * @param fundingAddress the address of the funders\n     * @return the amount funded\n     */\n    function getAddressToAmountFunded(\n        address fundingAddress\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[fundingAddress];\n    }\n\n    function getVersion() public view returns (uint256) {\n        return s_priceFeed.version();\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n\n// Ether is sent to contract\n//      is msg.data empty?\n//          /   \\\n//         yes  no\n//         /     \\\n//    receive()?  fallback()\n//     /   \\\n//   yes   no\n//  /        \\\n//receive()  fallback()\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "//SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getprice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 10000000000); //1e10\n    }\n\n    // 1000000000\n    // call it get fiatConversionRate, since it assumes something about decimals\n    // It wouldn't work for every aggregator\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getprice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //1e18\n        return ethAmountInUsd;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
