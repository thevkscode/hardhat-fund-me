{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeed",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "fundingAddress",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "s_addressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xe4887e73e6d56924ef5cc45d28b798bdc80a4648d58d377aaa06270200e63b23",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1081251",
        "logsBloom": "0x
        "blockHash": "0xb94534f46b1aacc4f0f67e278dda26c4c21c86d9ed5100d09f64ba96c2c4744f",
        "transactionHash": "0xe4887e73e6d56924ef5cc45d28b798bdc80a4648d58d377aaa06270200e63b23",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1081251",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "8ae252205dd62a5244b83fa6ad908907",
    "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Vivek Singh\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n//1.pragma\\npragma solidity ^0.8.7;\\n//2.imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n//the below syntex helps in creating documentation of contract,\\n//we can use the same to describe the functions of contract\\n/** @title A contract for crowd funding\\n * @author Vivek Singh\\n * @notice This is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    //type declarations\\n    using PriceConverter for uint256;\\n\\n    //static variables\\n    uint256 public constant MINIMUM_USD = 50 * 1 ** 18; //constant<=efficient way to save the gas\\n    address private immutable i_owner; //immutable<=efficient way to save the gas\\n    address[] private s_funders;\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //events\\n\\n    //modifier\\n    modifier onlyOwner() {\\n        // require(msg.sender==i_owner,\\\"You Are Not the Owner\\\");\\n        //alternative and efficient way to save gas\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; //this means execution of other lines in the funcion where this modifier is declared\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n    //same as other language constructor\\n    constructor(address priceFeed) {\\n        i_owner = msg.sender; //msg.sender<=global function which returns the address of sender who is doing transaction\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    function fund()\\n        public\\n        payable\\n    //<=payable is used to do transactions in ether\\n    {\\n        //want to be able to set a minimum fund amount in USD\\n        //1.How do we send ETH to this contract?\\n        //required is used to set the minimum ether needed for transaction\\n        //msg.value tells that how much ether is requested to send my user\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        ); //etherium is sent in wei 1e18 wei==1 eth and mssg is generated when less than the checked eth is tried to send(reverting)\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        //what is revrting\\n        //undo any action before,and send the remaining gas back\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        //resetting the funders amount to 0\\n        for (\\n            uint256 fundersIndex = 0;\\n            fundersIndex < s_funders.length;\\n            fundersIndex++\\n        ) {\\n            address funder = s_funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset the funders\\n        s_funders = new address[](0);\\n        /*\\n        3 ways to send the money\\n        1.transfer\\n        2.send\\n        3.call\\n        */\\n        //transfer:-this throws the error if not executed successfully and automatically revert back the transaction,which can be used in try catch block\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        //send:-if not successfully executed ,this returns a boolean value which can be used to revert the transaction\\n        // bool sendSuccess=payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess,\\\"Transaction failed\\\");\\n\\n        //call:-this return 2  values ,one is boolean value which tells if the transaction is successfull or not,another is byte data which is returned along with transaction\\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(success);\\n        //modifier:-modifier are used to execute something in the starting or ending of multiple functions\\n    }\\n\\n    // google evm-opcodes:gas used for every events\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /*\\n     * @notice Gets the amount that an address has funded\\n     * @param fundingAddress the address of the funders\\n     * @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Ether is sent to contract\\n//      is msg.data empty?\\n//          /   \\\\\\n//         yes  no\\n//         /     \\\\\\n//    receive()?  fallback()\\n//     /   \\\\\\n//   yes   no\\n//  /        \\\\\\n//receive()  fallback()\\n\",\"keccak256\":\"0xfc29c31a8112173cbd8b39ed90c64b1413a36882c95fcf6d6b154c0c18d6f203\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getprice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 10000000000); //1e10\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getprice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //1e18\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x20a39bf6c6f15f9f13bd64fd836cacd2a9bea7ecf2d6adced30b13b6c66602f1\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013b7380380620013b783398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051611230620001876000396000818161033b015281816104ce0152818161056c015281816106ee01526108e401526112306000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd578063d7b4750c146101f457610091565b80630343fb25146100965780630d8e6e2c146100d35780631bf6132d146100fe5780633ccfd60b1461013b5780636b69a59214610152575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610ba7565b610231565b6040516100ca9190610bed565b60405180910390f35b3480156100df57600080fd5b506100e861027a565b6040516100f59190610bed565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610ba7565b610321565b6040516101329190610bed565b60405180910390f35b34801561014757600080fd5b50610150610339565b005b34801561015e57600080fd5b50610167610563565b6040516101749190610bed565b60405180910390f35b34801561018957600080fd5b50610192610568565b60405161019f9190610c17565b60405180910390f35b3480156101b457600080fd5b506101bd610590565b6040516101ca9190610c91565b60405180910390f35b6101db6105ba565b005b3480156101e957600080fd5b506101f26106ec565b005b34801561020057600080fd5b5061021b60048036038101906102169190610cd8565b61097a565b6040516102289190610c17565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610d1a565b905090565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103be576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104695760008082815481106103e3576103e2610d47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046190610da5565b9150506103c1565b50600067ffffffffffffffff81111561048557610484610dee565b5b6040519080825280602002602001820160405280156104b35781602001602082028036833780820191505090505b50600090805190602001906104c9929190610a9d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161051090610e4e565b60006040518083038185875af1925050503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b505090508061056057600080fd5b50565b603281565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60326105f1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109c190919063ffffffff16565b11610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062890610ec0565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106e39190610ee0565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610771576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107f457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107aa575b5050505050905060005b815181101561087f57600082828151811061081c5761081b610d47565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061087790610da5565b9150506107fe565b50600067ffffffffffffffff81111561089b5761089a610dee565b5b6040519080825280602002602001820160405280156108c95781602001602082028036833780820191505090505b50600090805190602001906108df929190610a9d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161092690610e4e565b60006040518083038185875af1925050503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b505090508061097657600080fd5b5050565b600080828154811061098f5761098e610d47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109cd836109fd565b90506000670de0b6b3a764000085836109e69190610f36565b6109f09190610fbf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7e9190611068565b5050509150506402540be40081610a9591906110e3565b915050919050565b828054828255906000526020600020908101928215610b16579160200282015b82811115610b155782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abd565b5b509050610b239190610b27565b5090565b5b80821115610b40576000816000905550600101610b28565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7482610b49565b9050919050565b610b8481610b69565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b600060208284031215610bbd57610bbc610b44565b5b6000610bcb84828501610b92565b91505092915050565b6000819050919050565b610be781610bd4565b82525050565b6000602082019050610c026000830184610bde565b92915050565b610c1181610b69565b82525050565b6000602082019050610c2c6000830184610c08565b92915050565b6000819050919050565b6000610c57610c52610c4d84610b49565b610c32565b610b49565b9050919050565b6000610c6982610c3c565b9050919050565b6000610c7b82610c5e565b9050919050565b610c8b81610c70565b82525050565b6000602082019050610ca66000830184610c82565b92915050565b610cb581610bd4565b8114610cc057600080fd5b50565b600081359050610cd281610cac565b92915050565b600060208284031215610cee57610ced610b44565b5b6000610cfc84828501610cc3565b91505092915050565b600081519050610d1481610cac565b92915050565b600060208284031215610d3057610d2f610b44565b5b6000610d3e84828501610d05565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db082610bd4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610de357610de2610d76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e38600083610e1d565b9150610e4382610e28565b600082019050919050565b6000610e5982610e2b565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610eaa601b83610e63565b9150610eb582610e74565b602082019050919050565b60006020820190508181036000830152610ed981610e9d565b9050919050565b6000610eeb82610bd4565b9150610ef683610bd4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f2b57610f2a610d76565b5b828201905092915050565b6000610f4182610bd4565b9150610f4c83610bd4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f8557610f84610d76565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fca82610bd4565b9150610fd583610bd4565b925082610fe557610fe4610f90565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61100f81610ff0565b811461101a57600080fd5b50565b60008151905061102c81611006565b92915050565b6000819050919050565b61104581611032565b811461105057600080fd5b50565b6000815190506110628161103c565b92915050565b600080600080600060a0868803121561108457611083610b44565b5b60006110928882890161101d565b95505060206110a388828901611053565b94505060406110b488828901610d05565b93505060606110c588828901610d05565b92505060806110d68882890161101d565b9150509295509295909350565b60006110ee82611032565b91506110f983611032565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561113857611137610d76565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561117557611174610d76565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111b2576111b1610d76565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111ef576111ee610d76565b5b82820290509291505056fea26469706673582212206016fc2bf75881e3c17cd4d21ff36f0a04ff7b3cb45dd1f12d71fbcf8a62bc6464736f6c63430008090033",
    "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd578063d7b4750c146101f457610091565b80630343fb25146100965780630d8e6e2c146100d35780631bf6132d146100fe5780633ccfd60b1461013b5780636b69a59214610152575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610ba7565b610231565b6040516100ca9190610bed565b60405180910390f35b3480156100df57600080fd5b506100e861027a565b6040516100f59190610bed565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610ba7565b610321565b6040516101329190610bed565b60405180910390f35b34801561014757600080fd5b50610150610339565b005b34801561015e57600080fd5b50610167610563565b6040516101749190610bed565b60405180910390f35b34801561018957600080fd5b50610192610568565b60405161019f9190610c17565b60405180910390f35b3480156101b457600080fd5b506101bd610590565b6040516101ca9190610c91565b60405180910390f35b6101db6105ba565b005b3480156101e957600080fd5b506101f26106ec565b005b34801561020057600080fd5b5061021b60048036038101906102169190610cd8565b61097a565b6040516102289190610c17565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610d1a565b905090565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103be576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104695760008082815481106103e3576103e2610d47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046190610da5565b9150506103c1565b50600067ffffffffffffffff81111561048557610484610dee565b5b6040519080825280602002602001820160405280156104b35781602001602082028036833780820191505090505b50600090805190602001906104c9929190610a9d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161051090610e4e565b60006040518083038185875af1925050503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b505090508061056057600080fd5b50565b603281565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60326105f1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109c190919063ffffffff16565b11610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062890610ec0565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106e39190610ee0565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610771576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107f457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107aa575b5050505050905060005b815181101561087f57600082828151811061081c5761081b610d47565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061087790610da5565b9150506107fe565b50600067ffffffffffffffff81111561089b5761089a610dee565b5b6040519080825280602002602001820160405280156108c95781602001602082028036833780820191505090505b50600090805190602001906108df929190610a9d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161092690610e4e565b60006040518083038185875af1925050503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b505090508061097657600080fd5b5050565b600080828154811061098f5761098e610d47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109cd836109fd565b90506000670de0b6b3a764000085836109e69190610f36565b6109f09190610fbf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7e9190611068565b5050509150506402540be40081610a9591906110e3565b915050919050565b828054828255906000526020600020908101928215610b16579160200282015b82811115610b155782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abd565b5b509050610b239190610b27565b5090565b5b80821115610b40576000816000905550600101610b28565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7482610b49565b9050919050565b610b8481610b69565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b600060208284031215610bbd57610bbc610b44565b5b6000610bcb84828501610b92565b91505092915050565b6000819050919050565b610be781610bd4565b82525050565b6000602082019050610c026000830184610bde565b92915050565b610c1181610b69565b82525050565b6000602082019050610c2c6000830184610c08565b92915050565b6000819050919050565b6000610c57610c52610c4d84610b49565b610c32565b610b49565b9050919050565b6000610c6982610c3c565b9050919050565b6000610c7b82610c5e565b9050919050565b610c8b81610c70565b82525050565b6000602082019050610ca66000830184610c82565b92915050565b610cb581610bd4565b8114610cc057600080fd5b50565b600081359050610cd281610cac565b92915050565b600060208284031215610cee57610ced610b44565b5b6000610cfc84828501610cc3565b91505092915050565b600081519050610d1481610cac565b92915050565b600060208284031215610d3057610d2f610b44565b5b6000610d3e84828501610d05565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db082610bd4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610de357610de2610d76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e38600083610e1d565b9150610e4382610e28565b600082019050919050565b6000610e5982610e2b565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610eaa601b83610e63565b9150610eb582610e74565b602082019050919050565b60006020820190508181036000830152610ed981610e9d565b9050919050565b6000610eeb82610bd4565b9150610ef683610bd4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f2b57610f2a610d76565b5b828201905092915050565b6000610f4182610bd4565b9150610f4c83610bd4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f8557610f84610d76565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fca82610bd4565b9150610fd583610bd4565b925082610fe557610fe4610f90565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61100f81610ff0565b811461101a57600080fd5b50565b60008151905061102c81611006565b92915050565b6000819050919050565b61104581611032565b811461105057600080fd5b50565b6000815190506110628161103c565b92915050565b600080600080600060a0868803121561108457611083610b44565b5b60006110928882890161101d565b95505060206110a388828901611053565b94505060406110b488828901610d05565b93505060606110c588828901610d05565b92505060806110d68882890161101d565b9150509295509295909350565b60006110ee82611032565b91506110f983611032565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561113857611137610d76565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561117557611174610d76565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111b2576111b1610d76565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111ef576111ee610d76565b5b82820290509291505056fea26469706673582212206016fc2bf75881e3c17cd4d21ff36f0a04ff7b3cb45dd1f12d71fbcf8a62bc6464736f6c63430008090033",
    "devdoc": {
        "author": "Vivek Singh",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "This is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
